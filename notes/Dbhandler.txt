class Dbhandler(context: Context) :
    SQLiteOpenHelper(context, DB_NAME ,null, DB_VERSION) {

        companion object{
            const val DB_NAME = "exam_notedb"
            const val DB_VERSION = 1
            const val TBL_NOTE = "notes_tbl"

            const val NOTE_ID = "note_id"
            const val NOTE_TITLE = "note_title"
            const val NOTE_DETAIL = "note_detail"

        }

    override fun onCreate(p0: SQLiteDatabase?) {

        var CREATE_NOTE_TBL = "CREATE TABLE $TBL_NOTE("+
                "$NOTE_ID INTEGER PRIMARY KEY AUTOINCREMENT," +
                "$NOTE_TITLE TEXT NOT NULL," +
                "$NOTE_DETAIL TEXT NOT NULL)"

        p0!!.execSQL(CREATE_NOTE_TBL)
        }

    override fun onUpgrade(p0: SQLiteDatabase?, p1: Int, p2: Int) {

        p0!!.execSQL("DROP TABLE if exists $TBL_NOTE")
    }



    fun insertNote(note: notes): Long {
        var db = this.writableDatabase

        val cv = ContentValues()


        cv.put(NOTE_TITLE, note.note_title)
        cv.put(NOTE_DETAIL, note.note_detail)


        var row = db.insert(TBL_NOTE, null, cv)
        return row
    }


    fun readNotes(): ArrayList<notes> {
        var db = this.readableDatabase
        var noteCursor = db.rawQuery("SELECT * FROM $TBL_NOTE", null)

        var noteList: ArrayList<notes> = ArrayList()

        if (noteCursor.moveToFirst()) {
            do {
                noteList.add(
                    notes(
                        noteCursor.getInt(0),
                        noteCursor.getString(1),
                        noteCursor.getString(2)
                    )
                )

            } while (noteCursor.moveToNext())
        }
        return noteList
    }


}